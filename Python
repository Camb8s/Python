print ("Hello,") + ("Cameron")
todays_date = "18/03/2023"
remainder = 1398 % 11
#this is a a comment to say that this is the annual rainfall
january_to_june_rainfall = 1.93 + 0.71 + 3.53 + 3.41 + 3.69 + 4.50
annual_rainfall = january_to_june_rainfall

july_rainfall = 1.05
annual_rainfall += july_rainfall

august_rainfall = 4.91
annual_rainfall += august_rainfall

september_rainfall = 5.16
october_rainfall = 7.20
november_rainfall = 5.06
december_rainfall = 4.06
september_to_december_rainfall = 5.16 + 7.20 + 5.06 + 4.06
annual_rainfall += september_to_december_rainfall
cucumbers = 3
price_per_cucumber = 3.25
total_cost = cucumbers * price_per_cucumber
print total_cost
cucumbers = 100
num_people = 6
whole_cucumbers_per_person = cucumbers/num_people
print whole_cucumbers_per_person
float_cucumbers_per_person = float (cucumbers)/num_people
print float_cucumbers_per_person
haiku = """The old pond,
A frog jumps in:
Plop!"""
# Hi! I'm Maria and I live in script.py.
# I'm an expert Python coder.
# I'm 21 years old and I plan to program cool stuff forever.
age_is_12 = False
name_is_maria = True
float_1 = 0.25
float_2 = 40.0
product = float_1 * float_2
big_string = "The product was 10" 
skill_completed = "Python Syntax"
exercises_completed = 13
#The amount of points for each exercise may change, because points don't exist yet
points_per_exercise = 5
point_total = 100
point_total = point_total + exercises_completed * points_per_exercise
print "I got "+str(point_total)+" points!"
# You can fix apostrophe's with a backslash!

'This isn\'t flying, this is falling with style!'
"""
The string "PYTHON" has six characters,
numbered 0 to 5, as shown below:

+---+---+---+---+---+---+
| P | Y | T | H | O | N |
+---+---+---+---+---+---+
  0   1   2   3   4   5

So if you wanted "Y", you could just type
"PYTHON"[1] (always start counting from 0!)
"""
fifth_letter = "MONTY"[4]
#how to count the letters
print fifth_letter
parrot = "Norwegian Blue"
print len(parrot) 
#How to do lowercase
parrot = "Norwegian Blue"
print parrot.lower()
#Upper case
parrot = "norwegian blue"
print parrot.upper()
#The str() method turns non-strings into strings! For examp
pi = 3.14
print str(pi)
ministry = "The Ministry of Silly Walks"

print len(ministry)
print ministry.upper()
#How to print variables
the_machine_goes = "Ping!"
print the_machine_goes
#Printing a string
print "Spam " + "and " + "eggs"
#The % after the string is used to combine a string with variables
string_1 = "Camelot"
string_2 = "place"

print "Let's not go to %s. 'Tis a silly %s." % (string_1, string_2)
my_string = "hey"
print len(my_string)
print my_string.upper()
#You can use a function called datetime.now() to retrieve the current date
from datetime import datetime
now = datetime.now()
print now
#for the year month and day you do it like this
current_year = now.year
print now.year
current_month = now.month
print now.month
current_day = now.day
print now.day
#To print todays date 
from datetime import datetime
now = datetime.now()
print '%02d/%02d/%04d' % (now.month, now.day, now.year)
#How to print the hours,minutes and seconds
from datetime import datetime
now = datetime.now()

print '%02d:%02d:%04d' % (now.hour, now.minute, now.second)
#How to do it all on one line
from datetime import datetime
now = datetime.now()

print '%02d/%02d/%04d %02d:%02d:%02d' % (now.month, now.day, now.year, now.hour, now.minute, now.second)
#Writing booleans
# Make me true!
bool_one = 3 < 5  # We already did this one for you!

# Make me false!
bool_two = 99 == "lettuce"

# Make me true!
bool_three = 44 / 2 <= 43

# Make me false!
bool_four = "potato" != "potato"

# Make me true!
bool_five = "tomato" == "tomato"
#For using or booleans
bool_one = 2 ** 3 == 108 % 100 or 'Cleese' == 'King Arthur'

bool_two = True or False

bool_three = 100 ** 0.5 >= 50 or False

bool_four = True or True

bool_five = 1 ** 100 == 100 ** 1 or 3 * 2 * 1 != 3 + 2 + 1
#For using the not tag for booleans
bool_one = not True

bool_two = not 3 ** 4 < 4 ** 3

bool_three = not 10 % 3 <= 10 % 2

bool_four = not 3 ** 2 + 4 ** 2 != 5 ** 2

bool_five = not not False
#Using boolean operators again
# Make me false!
bool_one = (2 <= 2) and "Alpha" == "Bravo"  # We did this one for you!

# Make me true!
bool_two = True or True

# Make me false!
bool_three = not True

# Make me true!
bool_four = True or True 

# Make me true!
bool_five = not False
#Using if statements
response = "Y"

answer = "Left"
if answer == "Left":
    print "This is the Verbal Abuse Room, you heap of parrot droppings!"
    def using_control_once():
    if 3 > 1:
        return "Success #1"

def using_control_again():
    if  4 == 4:
        return "Success #2"

print using_control_once()
print using_control_again()
#Using else statements
answer = "'Tis but a scratch!"

def black_knight():
    if answer == "'Tis but a scratch!":
        return True
    else:             
        return   False 
    


    
   
    def french_soldier():
    if answer == "Go away, or I shall taunt you a second time!":
        return True
    else:             
        return  False 
    #Using elif statments



    def greater_less_equal_5(answer):
    if answer > 5:
        return 1
    elif answer < 5:          
        return -1
    else:
        return 0
        
print greater_less_equal_5(4)
print greater_less_equal_5(5)
print greater_less_equal_5(6)


#Using more if and elif statements
def grade_converter(grade):
    if grade >= 90:
        return "A"
    elif grade >= 80:
        return "B"
    elif grade >= 70:
        return "C"
    elif grade >= 65:
        return "D"
    else:
        return "F"
      
# This should print an "A"      
print grade_converter(92)

# This should print a "C"
print grade_converter(70)

# This should print an "F"
print grade_converter(61)

#Pig latin translator
original = raw_input("Enter a word: ")